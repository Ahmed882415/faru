const axios = require('axios');
const fs = require('fs');
const path = require('path');

// Configuration centrale
const CONFIG = {
  fonts: {
    mathsans: {
      a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ",
      j: "ùóÉ", k: "ùóÑ", l: "ùóÖ", m: "ùóÜ", n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã",
      s: "ùóå", t: "ùóç", u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì",
      A: "ùóî", B: "ùóï", C: "ùóñ", D: "ùóó", E: "ùóò", F: "ùóô", G: "ùóö", H: "ùóõ", I: "ùóú",
      J: "ùóù", K: "ùóû", L: "ùóü", M: "ùó†", N: "ùó°", O: "ùó¢", P: "ùó£", Q: "ùó§", R: "ùó•",
      S: "ùó¶", T: "ùóß", U: "ùó®", V: "ùó©", W: "ùó™", X: "ùó´", Y: "ùó¨", Z: "ùó≠"
    }
  },
  stickers: [
    "254594546003916", "254595732670464", "254593389337365",
    "37117808696806", "254597316003639", "254598806003490",
    "254596219337082", "2379537642070973", "2379545095403561",
    "2379551785402892", "254597059336998"
  ],
  apiSettings: {
    url: "https://sandipbaruwal.onrender.com/gemini",
    timeout: 10000
  }
};

// Gestion du cache
class ResponseCache {
  constructor() {
    this.cache = new Map();
    this.cacheFile = path.join(__dirname, 'askCache.json');
    this.loadCache();
  }

  loadCache() {
    if (fs.existsSync(this.cacheFile)) {
      try {
        const data = fs.readFileSync(this.cacheFile, 'utf8');
        JSON.parse(data).forEach(([key, value]) => this.cache.set(key, value));
      } catch (e) {
        console.error("Erreur de lecture du cache:", e);
      }
    }
  }

  saveCache() {
    const data = JSON.stringify(Array.from(this.cache.entries()));
    fs.writeFileSync(this.cacheFile, data);
  }

  get(key) {
    return this.cache.get(key);
  }

  set(key, value) {
    this.cache.set(key, value);
    this.saveCache();
  }
}

const cache = new ResponseCache();

// Fonction utilitaire pour formater le texte
function formatText(text, user) {
  let result = `üìö ùêÑùêïùêÄùêëùêëùêàùêíùêìùêÑ (pour ${user}) üìö\n\n`;
  
  for (const char of text) {
    result += CONFIG.fonts.mathsans[char] || char;
  }
  
  return result + "\n\n‚ú® Cr√©√© par Evariste ‚ú®";
}

module.exports = {
  config: {
    name: "ask",
    version: "2.1",
    author: "ùêÑùêØùêöùê´ùê¢ùê¨ùê≠ùêû",
    longDescription: "Assistant IA avec cache et stylisation",
    category: "ai",
    guide: {
      en: "{p} [question]",
      fr: "{p} [question]"
    }
  },

  onStart: async function () {
    process.on('exit', () => cache.saveCache());
    process.on('SIGINT', () => process.exit());
  },

  onChat: async function ({ api, event, message }) {
    try {
      const prefixes = ['ae', 'ai', 'evariste', 'salut'];
      const body = event.body.toLowerCase();
      const prefix = prefixes.find(p => body.startsWith(p));
      
      if (!prefix) return;

      const prompt = event.body.substring(prefix.length).trim();
      
      // R√©ponse aux salutations
      if (!prompt) {
        const randomSticker = CONFIG.stickers[
          Math.floor(Math.random() * CONFIG.stickers.length)
        ];
        await api.sendMessage({
          body: "‚ú® Posez-moi une question ! ‚ú®",
          sticker: randomSticker
        }, event.threadID);
        return api.setMessageReaction("üëã", event.messageID, () => {}, true);
      }

      // V√©rification du cache
      const cacheKey = `${event.threadID}_${event.senderID}_${prompt}`;
      const cachedResponse = cache.get(cacheKey);
      
      if (cachedResponse) {
        await message.reply(cachedResponse);
        return api.setMessageReaction("‚ôªÔ∏è", event.messageID, () => {}, true);
      }

      // Requ√™te API
      api.setMessageReaction("‚è≥", event.messageID, () => {}, true);
      
      const userInfo = await api.getUserInfo(event.senderID);
      const userName = userInfo[event.senderID].name;
      
      const { data } = await axios.get(CONFIG.apiSettings.url, {
        params: { prompt: encodeURIComponent(prompt) },
        timeout: CONFIG.apiSettings.timeout
      });

      if (!data?.answer) throw new Error("R√©ponse API vide");
      
      // Formatage et stockage
      const formattedResponse = formatText(data.answer, userName);
      cache.set(cacheKey, formattedResponse);
      
      await message.reply(formattedResponse);
      api.setMessageReaction("‚úÖ", event.messageID, () => {}, true);

    } catch (error) {
      console.error("[ASK ERROR]", error);
      api.setMessageReaction("‚ùå", event.messageID, () => {}, true);
      
      const errorMessage = "‚ö†Ô∏è Erreur de traitement. Veuillez reformuler votre question.";
      await message.reply(errorMessage);
    }
  }
};
