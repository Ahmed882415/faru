module.exports = {
    config: {
        name: "top20",
        version: "1.0",
        author: "ùêÑùêØùêöùê´ùê¢ùê¨ùê≠ùêû",
        description: "Affiche le top 20 des plus riches",
        category: "economy",
        guide: {
            en: "{p}top20"
        }
    },

    onStart: async function () {},

    onChat: async function ({ api, event, message }) {
        try {
            // V√©rifie si le fichier existe
            if (!fs.existsSync(DATA_FILE)) {
                return message.reply("‚ÑπÔ∏è Aucune donn√©e √©conomique disponible.");
            }

            // Charge les donn√©es
            const userData = JSON.parse(fs.readFileSync(DATA_FILE, 'utf8'));

            // Trie les utilisateurs
            const sortedUsers = Object.entries(userData)
                .sort((a, b) => (b[1].balance || 0) - (a[1].balance || 0))
                .slice(0, 20);

            // Formatage du message
            let topList = "üèÜ ùóßùó¢ùó£ ùüÆùü¨ ùóóùóòùó¶ ùó£ùóüùó®ùó¶ ùó•ùóúùóñùóõùóòùó¶ üèÜ\n\n";
            
            for (const [index, [userId, data]] of sortedUsers.entries()) {
                const userInfo = await api.getUserInfo(userId);
                const userName = userInfo[userId]?.name || `Utilisateur ${userId}`;
                topList += `‚ñ∏ ${index + 1}. ${userName} ‚ûü ùó†ùóîùó•ùóñùóîùóóùó¢ùó•ùóò ${data.balance || 0}\n`;
            }

            // R√©ponse avec style
            await message.reply(topList);
            api.setMessageReaction("üí∞", event.messageID, () => {}, true);

        } catch (error) {
            console.error("Erreur top20:", error);
            message.reply("‚ùå Erreur lors de la g√©n√©ration du classement.");
        }
    }
}
